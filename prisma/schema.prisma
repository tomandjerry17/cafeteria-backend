// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  role        Role
  fullName    String
  email       String       @unique
  passwordHash String
  contact     String?
  studentId   String?
  createdAt   DateTime     @default(now())

  orders      Order[]
  favorites   Favorite[]
  feedback    Feedback[]
  notifications Notification[]
  inventoryLogs InventoryLog[]
}

enum Role {
  student
  staff
  admin
}

model MenuCategory {
  id          String     @id @default(uuid())
  name        String
  description String?

  items       MenuItem[]
}

model MenuItem {
  id          String      @id @default(uuid())
  categoryId  String?
  name        String
  description String?
  price       Decimal
  photoUrl    String?
  availability Boolean    @default(true)
  stockLimit  Int?
  createdAt   DateTime    @default(now())

  category    MenuCategory? @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  favorites   Favorite[]
  feedback    Feedback[]
  inventoryLogs InventoryLog[]
}

model Order {
  id            String       @id @default(uuid())
  userId        String
  status        OrderStatus  @default(pending)
  pickupType    PickupType
  pickupTime    DateTime?
  totalPrice    Decimal
  paymentStatus PaymentStatus @default(pending)
  createdAt     DateTime     @default(now())

  user          User         @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
  notifications Notification[]
}

enum OrderStatus {
  pending
  confirmed
  preparing
  ready
  rejected
  picked_up
}

enum PickupType {
  dine_in
  take_out
}

enum PaymentStatus {
  pending
  cash_on_pickup
  paid
}

model OrderItem {
  id          String    @id @default(uuid())
  orderId     String
  itemId      String
  quantity    Int
  priceAtOrder Decimal

  order       Order     @relation(fields: [orderId], references: [id])
  item        MenuItem  @relation(fields: [itemId], references: [id])
}

model Favorite {
  id        String    @id @default(uuid())
  userId    String
  itemId    String
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id])
  item      MenuItem  @relation(fields: [itemId], references: [id])

  @@unique([userId, itemId]) // prevent duplicates
}

model Feedback {
  id        String    @id @default(uuid())
  userId    String
  itemId    String
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id])
  item      MenuItem  @relation(fields: [itemId], references: [id])
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  orderId   String
  message   String
  status    NotificationStatus @default(unread)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

enum NotificationStatus {
  unread
  read
}

model InventoryLog {
  id        String    @id @default(uuid())
  staffId   String?
  itemId    String
  changeType ChangeType
  quantity  Int
  note      String?
  createdAt DateTime @default(now())

  staff     User?     @relation(fields: [staffId], references: [id])
  item      MenuItem @relation(fields: [itemId], references: [id])
}

enum ChangeType {
  restock
  deduct
}
