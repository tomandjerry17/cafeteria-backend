generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  role                 Role
  fullName             String
  email                String    @unique
  passwordHash         String
  contact              String?
  studentId            String?
  emailVerified        Boolean   @default(false)
  approved             Boolean   @default(false)
  verificationCode     String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  createdAt            DateTime  @default(now())

  // ðŸ§© Updated relation names
  orders            Order[]   @relation("OrderUser")
  processedOrders   Order[]   @relation("OrderProcessedBy")
  processedPayments Payment[] @relation("ProcessedByPayments")

  favorites     Favorite[]
  feedback      Feedback[]
  notifications Notification[]
  inventoryLogs InventoryLog[]
}

enum Role {
  student
  staff
  admin
}

model MenuCategory {
  id          String  @id @default(uuid())
  name        String
  description String?

  items MenuItem[]
}

model MenuItem {
  id           String   @id @default(uuid())
  categoryId   String?
  name         String
  description  String?
  price        Decimal
  photoUrl     String?
  availability Boolean  @default(true)
  stockLimit   Int?
  createdAt    DateTime @default(now())

  category      MenuCategory?  @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  favorites     Favorite[]
  feedback      Feedback[]
  inventoryLogs InventoryLog[]
}

model Order {
  id            String        @id @default(uuid())
  userId        String?
  processedById String?
  status        OrderStatus   @default(pending)
  pickupType    PickupType
  pickupTime    DateTime?
  totalPrice    Decimal
  paymentStatus PaymentStatus @default(pending)
  paymentConfirmed Boolean     @default(false)
  createdAt     DateTime      @default(now())

  // ðŸ§© POS-related fields
  customerType CustomerType @default(student)
  customerName String?

  // ðŸ§© Relations with proper names
  user          User?          @relation("OrderUser", fields: [userId], references: [id])
  processedBy   User?          @relation("OrderProcessedBy", fields: [processedById], references: [id])
  orderItems    OrderItem[]
  notifications Notification[]
  payments      Payment[]
}

enum OrderStatus {
  pending
  confirmed
  preparing
  ready
  rejected
  picked_up
}

enum PickupType {
  dine_in
  take_out
}

enum PaymentStatus {
  pending
  cash_on_pickup
  paid
}

model OrderItem {
  id           String  @id @default(uuid())
  orderId      String
  itemId       String
  quantity     Int
  priceAtOrder Decimal

  order Order    @relation(fields: [orderId], references: [id])
  item  MenuItem @relation(fields: [itemId], references: [id])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  itemId    String
  createdAt DateTime @default(now())

  user User     @relation(fields: [userId], references: [id])
  item MenuItem @relation(fields: [itemId], references: [id])

  @@unique([userId, itemId])
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  itemId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user User     @relation(fields: [userId], references: [id])
  item MenuItem @relation(fields: [itemId], references: [id])
}

model Notification {
  id        String             @id @default(uuid())
  userId    String
  orderId   String
  message   String
  status    NotificationStatus @default(unread)
  createdAt DateTime           @default(now())

  user  User  @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id])
}

enum NotificationStatus {
  unread
  read
}

model InventoryLog {
  id         String     @id @default(uuid())
  staffId    String?
  itemId     String
  changeType ChangeType
  quantity   Int
  note       String?
  createdAt  DateTime   @default(now())

  staff User?    @relation(fields: [staffId], references: [id])
  item  MenuItem @relation(fields: [itemId], references: [id])
}

enum ChangeType {
  restock
  deduct
}

// ðŸ§© New for POS / Payments

enum CustomerType {
  student
  walk_in
}

enum PaymentMethod {
  cash
  gcash
  card
}

model Payment {
  id             String        @id @default(uuid())
  orderId        String?       // âœ… make optional
  processedById  String
  amountDue      Decimal
  amountReceived Decimal
  change         Decimal
  paymentMethod  PaymentMethod
  createdAt      DateTime      @default(now())

  order       Order? @relation(fields: [orderId], references: [id])
  processedBy User  @relation("ProcessedByPayments", fields: [processedById], references: [id])
}
